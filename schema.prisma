datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")

  // url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  // directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

generator client {
  provider = "prisma-client-js"
  // previewFeatures = []
}

generator dbml {
  provider = "prisma-dbml-generator"
}

generator nestjsDto {
  provider                        = "prisma-generator-nestjs-dto"
  output                          = "../src/@generated/nestjs-dto"
  outputToNestJsResourceStructure = "false"
  exportRelationModifierClasses   = "true"
  reExport                        = "false"
  createDtoPrefix                 = "Create"
  updateDtoPrefix                 = "Update"
  dtoSuffix                       = "Dto"
  entityPrefix                    = ""
  entitySuffix                    = ""
  fileNamingStyle                 = "camel"
}

model Plan {
  id              String         @id @default(cuid())
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  expiresAt       DateTime
  planType        PlanType       @default(FREEMIUM)
  isTrial         Boolean
  isAdFree        Boolean
  maxParticipants Int            @default(4)
}
enum PlanType {
  FREEMIUM
  PREMIUM
}


model PlanPurchase {
  id                   String        @id @default(cuid())
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  transactionHash      String
  modeOfPayment        String
  amountInINR          String
  amountInPaidCurrency String
  paymentCurrencyName  String
  isConfirmed          Boolean
  planId               String
  organisationId       String
}

model Organisation {
  id            String             @id @default(cuid())
  /// @DtoReadOnly
  createdAt     DateTime           @default(now())
  /// @DtoReadOnly
  updatedAt     DateTime           @updatedAt
  email         String             @unique
  name          String
  address       String?
  metadata      String?
  activePlanId  String?


}

model SalesWalaAdmin {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String   @unique
  password  String
  firstname String?
  lastname  String?
  metadata  String?
}

model SalesWalaAppUser {
  id             String        @id @default(cuid())
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  email          String        @unique
  password       String
  firstname      String?
  lastname       String?
  role           UserRole
  organisationId String?
  metadata       String?
  isVerified     Boolean
  deviceId       String?
  isEnabled      Boolean       @default(true)
}

model Products {
  id                   String                 @id @default(cuid())
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  defaultPrice         String
  metadata             String?
  organisationId       String?
  isDisabled           Boolean                @default(false)
}

model Vendor {
  id             String            @id @default(cuid())
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  metadata       String?
  creatorId      String?
  organisationId String?
}

model QuotationParticulars {
  id          String     @id @default(cuid())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  productId   String?
  metadata    String?
  quotationId String?
}

model Quotation {
  id                   String                 @id @default(cuid())
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  metadata             String?
  creatorId            String?
  organisationId       String
  vendorId             String
  hasConvertedToOrder  Boolean
  orderState           OrderStatus            @default(NONE)
}

model Attendance {
  id           String            @id @default(cuid())
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  metadata     String?
  punchInTime  DateTime          @default(now())
  punchOutTime DateTime?
  userID       String?
  attendanceStatus AttendanceStatus  @default(PRESENT)
}

model LocationLog {
  id                 String            @id @default(cuid())
  createdAt          DateTime          @default(now())
  location           String?
  attendanceId       String
}


enum AttendanceStatus {
  PRESENT
  ABSENT
  LEAVE
  HOLIDAY
}


enum UserRole {
  SALES_MANAGER
  SALES_PERSON
}

enum OrderStatus {
  NONE
  PENDING
  FINISHED
  CANCELLED
}



model Task {
  id           String     @id @default(cuid())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  metadata     String?
  creatorId    String
  assignedToId String
  status       TaskStatus @default(PENDING)
}

enum TaskStatus {
  PENDING
  ONGOING
  FINISHED
}

model Expense {
  id            String               @id @default(cuid())
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  amount        String
  metadata      String?
  paymentStatus ExpensePaymentStatus @default(PENDING)
  creatorId     String?
}

model Announcement {
  id             String        @id @default(cuid())
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  metadata       String?
  organisationId String?
}

enum ExpensePaymentStatus {
  PENDING
  PAID
  CANCELLED
}
